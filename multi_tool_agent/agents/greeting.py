import os
from dotenv import load_dotenv

# Your existing load_dotenv call:
load_dotenv(os.path.join(os.path.dirname(os.path.dirname(__file__)), '.env'))

# --- Add this for debugging ---
print(f"DEBUG: GOOGLE_API_KEY from os.environ: {os.environ.get('GOOGLE_API_KEY')}")
# --- End debug ---

import logging
from datetime import datetime
from typing import ClassVar, Set, Any, Dict, Optional

from ..models.schemas import ToolRequest, ToolResponse
from google.adk.agents import LlmAgent

try:
    from . import client
except ImportError:
    client = None

from multi_tool_agent.config.response import GREETING_RESPONSES

logger = logging.getLogger(__name__)

class GreetingAgent(LlmAgent):
    greetings: ClassVar[Set[str]] = {
        "hello", "hi", "hey", "greetings",
        "good morning", "good afternoon", "good evening",
        "howdy", "hola", "welcome", "plotbuddy", "plot buddy",
        "start", "let's start"
    }

    def __init__(self, model_name: str = "gemini-1.5-flash"):
        super().__init__(
            model=model_name,
            name="greeting_agent",
            description="Welcomes users, offers initial guidance, and can identify story creation intent.",
            instruction="You are a friendly AI assistant that greets users warmly and encourages story creation."
        )
        logger.info("GreetingAgent initialized.")

    def process(self, request: ToolRequest, context: Dict[str, Any] = None) -> ToolResponse:
        message = request.input.strip()
        message_lower = message.lower()

        # Only respond to greetings
        if not any(word in message_lower for word in self.greetings):
            logger.info(f"No greeting keywords found in: '{message}' - declining to process")
            return ToolResponse(success=False, output=None, message="Not a greeting message")

        # Use ADK LlmAgent to generate a greeting
        try:
            prompt = (
                "You are PlotBuddy, a friendly creative writing assistant. "
                "Greet the user warmly and encourage them to start writing a story."
            )
            llm_response = self.run(prompt=prompt)
            output = getattr(llm_response, "output", None) or getattr(llm_response, "text", None)
            if output:
                return ToolResponse(success=True, output=output, message="Greeting generated by LLM.")
        except Exception as e:
            logger.error(f"Error generating greeting with ADK LlmAgent: {e}")

        # Fallback to static greeting
        hour = datetime.now().hour
        if hour < 12:
            greeting = GREETING_RESPONSES.get("morning")
        elif hour < 18:
            greeting = GREETING_RESPONSES.get("afternoon")
        else:
            greeting = GREETING_RESPONSES.get("evening")
        return ToolResponse(success=True, output=greeting, message="Fallback greeting.")


# --- For local testing purposes ---
if __name__ == "__main__":
    from pydantic import BaseModel

    # Mock ToolRequest and ToolResponse for standalone testing
    class MockToolRequest(BaseModel):
        user_id: str
        input: Any
        context: Optional[Dict[str, Any]] = None

    class MockToolResponse(BaseModel):
        success: bool = True
        output: Optional[str] = None
        message: Optional[str] = None

        @classmethod
        def error(cls, msg: str) -> "MockToolResponse":
            return cls(success=False, output=msg, message="ERROR")

    # Override the imported ToolRequest and ToolResponse for the testing scope
    ToolRequest = MockToolRequest
    ToolResponse = MockToolResponse

    # Mock the 'client' module and its GOOGLE_API_KEY
    class MockClient:
        def __init__(self, api_key: Optional[str]):
            self.GOOGLE_API_KEY = api_key

    # Temporarily define necessary config responses for local testing
    # In a real setup, these would be imported from multi_tool_agent.config.response
    GREETING_RESPONSES = {
        "morning": "Good morning! ‚òÄÔ∏è Welcome to PlotBuddy! Let's craft an amazing story today.",
        "afternoon": "Good afternoon! üåÜ PlotBuddy is ready to help you write. What masterpiece will you create?",
        "evening": "Good evening! üåô Welcome to PlotBuddy. Let's make some magic happen before the day ends."
    }
    # For testing, FAQ_RESPONSES, STORY_TEMPLATES, ERROR_MESSAGES are not directly used in this agent's logic.

    # Set up logging for testing
    logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

    # --- Test 1: With a mock API key to enable LLM calls ---
    print("--- Test Set 1: With Mock API Key (LLM Enabled) ---")
    client = MockClient(api_key="MOCKED_API_KEY_FOR_TESTING_123") # Enable LLM path
    agent = GreetingAgent()

    test_queries_llm_enabled = [
        "Hi there!",
        "Good afternoon PlotBuddy",
        "hello",
        "howdy!",
        "plot buddy",
        "start",
        "let's start",
        "create story", # Test direct story creation intent
        "write me a story", # Test another story creation intent
        "tell me a story", # Test another story creation intent
        "random non-greeting text", # Should not be handled by GreetingAgent
        123 # Non-string input
    ]

    for query in test_queries_llm_enabled:
        print(f"\nQ: {query}")
        response = agent.process(ToolRequest(user_id="test_user_llm", input=query))

        if response.success:
            print(f"A (Output): {response.output}")
            if response.message:
                print(f"   (Message: {response.message})")
        else:
            print(f"A (Not Handled/Error): {response.output or response.message}")
        print("-" * 50)

    # --- Test 2: Without a mock API key (LLM Disabled, only fallbacks) ---
    print("\n--- Test Set 2: Without Mock API Key (LLM Disabled, Fallback Only) ---")
    client = MockClient(api_key=None) # Disable LLM path
    agent = GreetingAgent()

    test_queries_llm_disabled = [
        "Hi there!",
        "Good morning PlotBuddy",
        "hello",
        "create story", # Test direct story creation intent with fallback
        "random non-greeting text",
    ]

    for query in test_queries_llm_disabled:
        print(f"\nQ: {query}")
        response = agent.process(ToolRequest(user_id="test_user_fallback", input=query))

        if response.success:
            print(f"A (Output): {response.output}")
            if response.message:
                print(f"   (Message: {response.message})")
        else:
            print(f"A (Not Handled/Error): {response.output or response.message}")
        print("-" * 50)