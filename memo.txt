multi_tool_agent/
This is your backend (Python, ADK, agents, orchestrator, etc.).

my-chat-app/
This is your frontend (React app, where you put ChatApp.jsx).

How to connect them:

Run your backend (multi_tool_agent) so it exposes an API endpoint (e.g., /api/chat).
Run your frontend (my-chat-app) with npm start or yarn start.
In your React code, make sure the fetch URL matches your backend endpoint.
If running locally on different ports, use the full URL, e.g.:


your_project_root/
├── multi_tool_agent/
│   ├── __init__.py          <-- IMPORTANT: This file must exist!
│   ├── agents/
│   │   ├── __init__.py      <-- IMPORTANT: This file must exist!
│   │   └── story.py         <-- Your StoryAgent code is here
│   └── models/
│       ├── __init__.py      <-- IMPORTANT: This file must exist!
│       └── schemas.py       <-- Your ToolRequest, ToolResponse are here
├── .env                     <-- Your environment variables file
├── some_main_app.py         <-- (Optional) Your main application entry point
└── requirements.txt



python -m multi_tool_agent.api.server
uvicorn multi_tool_agent.api.server:app --reload
python test_story.py

uvicorn multi_tool_agent.api.server:app --host 0.0.0.0 --port 8080

lsof -ti:8080 | xargs kill


Google-ADK-Hackathon/
├── .env                    # Environment variables (API keys)
├── requirements.txt        # Dependencies
├── multi_tool_agent/
│   ├── __init__.py         # Package initialization
│   ├── agent.py            # Main entry point
│   ├── adk_compatibility.py  # ADK compatibility layer
│   ├── agents/             # Specialized agents
│   │   ├── __init__.py     # Agent registry
│   │   ├── greeting.py     # Handles greetings
│   │   ├── faq.py          # Answers questions about the app
│   │   ├── story.py        # Story generation & editing
│   │   ├── profile.py      # User profile & coaching
│   │   └── manager.py      # Orchestrator/router
│   ├── api/                # API layer
│   │   ├── __init__.py
│   │   └── server.py       # FastAPI server
│   └── models/             # Data models
│       └── schemas.py      # Pydantic schemas


Hosting URL: https://adk-hackathon-2025-b4bfc.web.app

0. uvicorn multi_tool_agent.api.server:app --host 0.0.0.0 --port 8080

1. my-chat-app
npm run build
firebase deploy

2. root
gcloud builds submit --tag gcr.io/adk-hackathon-2025-b4bfc/plotbuddy-api
gcloud run deploy plotbuddy-api \
  --image gcr.io/adk-hackathon-2025-b4bfc/plotbuddy-api \
  --platform managed \
  --region us-central1 \
  --allow-unauthenticated

3. root
firebase deploy --only hosting





Testing Instructions

1. Clone the repository to your local machine and navigate to the project directory.

2. Set up your environment variables:
   - Copy the example `.env` file (if available) and fill in any required API keys or configuration values.

3. Install backend dependencies:
   pip install -r requirements.txt

4. Install frontend dependencies:
   cd my-chat-app
   npm install

5. Start the backend server:
   uvicorn multi_tool_agent.api.server:app --reload

6. Start the frontend development server:
   npm start
   (Make sure you are inside the frontend directory, e.g., `my-chat-app`.)

7. Open your browser and go to http://localhost:3000 (or the port shown in your terminal) to access the application.

8. Test the main features:
   - Start a new story by selecting a genre, mood, and length.
   - Interact with the chatbot by asking for genre suggestions, brainstorming help, writing tips, or pricing information.
   - Try entering unsupported genres to see how the app handles fallback responses.
   - Test the app on both desktop and mobile devices.

9. Check the browser’s developer tools (Network tab) to verify API responses and ensure errors are handled gracefully.

10. If automated tests are available, run:
    pytest         # for backend tests
    npm test       # for frontend tests

11. If you encounter any issues, review the terminal logs and consult the README for troubleshooting